#!/bin/bash
echo "* Creating Launch Template **"
echo "Launch Template Name :"
read ltname
#Print the Name and ID of Security Groups for user reference
aws ec2 describe-security-groups --query "SecurityGroups[*].{Name:GroupName,ID:GroupId}" --output table
echo "Security Groups Id :"
read sg_id
echo "Security Groups Name :"
read sg_name
#Launch template aws cli command
lt_id=$(aws ec2 create-launch-template \
--launch-template-name $ltname \
--launch-template-data '{
"ImageId": "ami-052cef05d01020f1d",
"InstanceType": "t2.micro",
"SecurityGroupIds": ['$sg_id'],
"TagSpecifications": [{
"ResourceType": "instance",
"Tags": [{
"Key":"Name",
"Value":"webserver"
}]
}],
#User data in Base64 Format
"UserData":
"IyEvYmluL3NoCnN1ZG8gc3UKeXVtIGluc3RhbGwgaHR0cGQgLXkKc2VydmljZSAgaHR0cGQgc3RhcnQKbWtkaXIg
L3Zhci93d3cvaHRtbC9pbWFnZQpta2RpciAvdmFyL3d3dy9odG1sL3ZpZGVvCmVjaG8gIjxoMT5JbnNpZGUgR2VuZ
XJhbCBJbnN0YW5jZSAkKGhvc3RuYW1lIC1mKTwvaDE+IiA+IC92YXIvd3d3L2h0bWwvaW5kZXguaHRtbAplY2hvIC
I8aDE+SW5zaWRlIEltYWdlIEluc3RhbmNlIGluc2lkZSBpbWFnZSBkaXIgJChob3N0bmFtZSAtZik8L2gxPiIgPiAvdmFy
L3d3dy9odG1sL2ltYWdlL2luZGV4Lmh0bWwKZWNobyAiPGgxPkluc2lkZSBWaWRlbyBJbnN0YW5jZSBpbnNpZGUg
dmlkZW8gZGlyICQoaG9zdG5hbWUgLWYpPC9oMT4iID4gL3Zhci93d3cvaHRtbC92aWRlby9pbmRleC5odG1s"
}' --query "LaunchTemplate[0].LaunchTemplateId" --output text)
# To declare static Array
arr=(1 General Image Video)
# Creating 3 Target Groups
for i in 1 2 3
do
#create target groups
aws elbv2 create-target-group \
--name TG-${arr[$i]} \
--protocol HTTP \
--port 80 \
--target-type instance \
--vpc-id vpc-78845313\
--health-check-interval-seconds 5 \
--health-check-timeout-seconds 2 \
--healthy-threshold-count 2 \
--unhealthy-threshold-count 2 \
done
#Print the Name and ID of Security Groups for user reference
#Print ID of Subnet for user reference
aws ec2 describe-security-groups --query "SecurityGroups[*].{Name:GroupName,ID:GroupId}" --output table
aws ec2 describe-subnets --query "Subnets[*].{ID:SubnetId}" --output table
echo "Enter Subnet ID"
read subnet_id subnet_id1 subnet_id2
echo "Security Groups Id :"
read sg_id
#create load balancer
aws elbv2 create-load-balancer --name "ALB" \
--subnets $subnet_id $subnet_id1 $subnet_id2 --security-groups $sg_id
#create default listener load balancer
#Create Default listener for Load balancer
ALB_ID=$(aws elbv2 describe-load-balancers --query "LoadBalancers[0].LoadBalancerArn" \
--output text)
ARN=$(aws elbv2 describe-target-groups --query "TargetGroups[0].TargetGroupArn" \
--output text)
listner_ARN=$(aws elbv2 create-listener \
--load-balancer-arn $ALB_ID \
--protocol HTTP \
--port 80 \
--default-actions Type=forward,TargetGroupArn=$ARN \
--query 'Listeners[0].ListenerArn' \
--output text)
aws elbv2 describe-target-groups --query "TargetGroups[*].{Name:TargetGroupName,ID:TargetGroupArn}" --output
table
arr1=(1 2 Image Video)
#Creating Rules for load balancer
for i in 2 3
do
echo "Enter ARN of Target Group => [${arr1[$i]}]"
read tgarn1
cat <<EOF > actions-forward-path.json
[
{
"Type": "forward",
"ForwardConfig": {
"TargetGroups": [
{
"TargetGroupArn": "$tgarn1"
}
]
}
}
]
EOF
cat <<EOF > conditions-path.json
[
{
"Field": "path-pattern",
"PathPatternConfig": {
"Values": ["${arr1[$i]}"]
}
}
]
EOF
AWS_ALB_LISTENER_RULE_ARN=$(aws elbv2 create-rule \
--listener-arn $listner_ARN\
--priority $i \
--conditions file://conditions-path.json \
--actions file://actions-forward-path.json \
--query 'Rules[0].RuleArn' \
--output text)
done
echo "Enter Subnet ID"
read subnet_id subnet_id1 subnet_id2
for i in 1 2 3
do
echo "Enter Auto Scaling Group Name :"
read name
#Print ID of launch template for user reference
aws ec2 describe-launch-templates --query "LaunchTemplates[*].{Name :LaunchTemplateName,
ID:LaunchTemplateId}" --output table
echo "Enter Launch template Id"
read lt_id
echo "Enter Target Group ARN :"
read tgarn
#Create Auto Scaling Group
aws autoscaling create-auto-scaling-group --auto-scaling-group-name $name \
--launch-template LaunchTemplateId=$lt_id,Version='$Latest' \
--vpc-zone-identifier " $subnet_id , $subnet_id1 ,$subnet_id2" \
--target-group-arns $tgarn \
--max-size 3 --min-size 1 --desired-capacity 2 \
--health-check-grace-period 120 \
--health-check-type ELB \
done